# This file is part of the Terraform EKS module example.
name: Deploy Demo App

on:
  workflow_run:
    workflows: ["Terraform Deploy"]
    types:
      - completed
    status: success

jobs:
  deploy-demo-app:
    name: Deploy Demo App to EKS
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Install kubectl and eksctl
      - name: Install kubectl and eksctl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      # 4. Setup kubeconfig from Terraform output
      - name: Extract EKS Cluster Name
        id: get-cluster-name
        run: |
          CLUSTER_NAME=$(terraform -chdir=terraform output -raw eks_cluster_name)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: eksctl utils write-kubeconfig --cluster $CLUSTER_NAME --region ${{ secrets.AWS_REGION }}

      # 5. Deploy app using kubectl
      - name: Deploy Node.js App to EKS
        run: |
          kubectl apply -f app/deployment.yaml
          kubectl apply -f app/service.yaml
          kubectl rollout status deployment/node-demo
